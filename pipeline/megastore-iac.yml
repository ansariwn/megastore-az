name: '0.1.$(Rev:r)'

trigger: none

variables:
- group: megastore

pool:
  name: local
  demands:
  - agent.name -equals windows-10

stages:
- stage: provision
  displayName: provision
  jobs:
  - job: provision_resources
    workspace:
      clean: all
    steps:
    - script: 'cmd /k set'
      displayName: 'output environemt variables'

    - publish: $(System.DefaultWorkingDirectory)/iac
      artifact: iac
      displayName: 'publish iac artefact'

    - download: current
      artifact: iac
      displayName: 'download iac artefact'

    - powershell: New-Item -Path . -Name "backend.tf" -ItemType "file" -Value "terraform {`n  backend `"azurerm`" {}`n}"
      displayName: 'create file with azurerm backend configuration'
      workingDirectory: $(Pipeline.Workspace)/iac

    - script: terraform init
        --backend-config="storage_account_name=$(storage_account_name)"
        --backend-config="container_name=$(container_name)"
        --backend-config="access_key=$(access_key)"
        --backend-config="key=$(AppName)$(key)"
      displayName: 'terraform init'
      workingDirectory: $(Pipeline.Workspace)/iac

    - script: |
        terraform plan -var projectname=$(AppName)
        terraform apply -var projectname=$(AppName) --auto-approve
      displayName: 'terraform plan and apply'
      workingDirectory: $(Pipeline.Workspace)/iac
      env:
        ARM_CLIENT_ID: $(azure_client_id)
        ARM_CLIENT_SECRET: $(azure_client_secret)
        ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
        ARM_TENANT_ID: $(azure_tenant_id)
        AKS_CLIENT_ID:  $(aks_client_id)
        AKS_CLIENT_SECRET:  $(aks_client_secret)

    # - script: terraform destroy -var appname=$(AppName) --auto-approve
    #   displayName: 'terraform destroy'
    #   workingDirectory: $(Pipeline.Workspace)/iac
    #   env:
    #     ARM_CLIENT_ID: $(azure_client_id)
    #     ARM_CLIENT_SECRET: $(azure_client_secret)
    #     ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
    #     ARM_TENANT_ID: $(azure_tenant_id)